#!/usr/bin/env python3

import rospy
import numpy as np
import cv2
import os
import time
import tf 

from threading import Thread, Lock
from nav_msgs.msg import OccupancyGrid, Odometry
from rto_map_server.srv import GetMap
from geometry_msgs.msg import PoseWithCovarianceStamped, Point, PoseStamped
from rto_costmap_generator.srv import SwitchMaps, ClearMap, AddLocalMap
from sensor_msgs.msg import LaserScan, PointCloud
from std_msgs.msg import String


# Create wrapper for easy timing of methods by using a decorator
def timed(func):
    def wrapper(*args):
        if not log_times:
            return func(*args)
        time_start = time.time()
        out = func(*args)
        time_end = time.time()
        time_took = time_end - time_start
        rospy.loginfo('Costmap generator: Method {} took {}s.'.format(func.__name__, time_took))
        return out
    return wrapper

# Create wrapper for easy threading by using a decorator
def threaded(fn):
    def wrapper(*args):
        Thread(target=fn, args=args).start()
    return wrapper


class CostmapGenerator():
    """
    Class used for initialization of a node that is responsible for generating costmaps.

    Global costmap: OccupancyGrid based on static map from map server that has been padded in order to allow
                    the use of a point representation of the mobile robot for path planning. 
                    There exist two types of padding: hard (val: 99) and soft padding (val: 98-1). 
                    Hard padded cells should under no circumstances be  visited by the robot while soft padded 
                    cells can be visited by the robot. Soft padded cells increase the cost that is estimated by 
                    the planning algorithm.

    Local costmap:  OccupancyGrid based on the current measurements of the laser sensor. The local costmap should
                    detect obstacles that are not appearing in the static map. Based on the recovery behaviour of the
                    local planner, the local costmap gets absorbed into the global costmap to allow the robot to efficiently
                    plan its path around the new appearing obstacles.

    Service 'switch_maps'
    @request: map_nr_switch [int8]
    @response: success [bool]

    Service 'clear_map'
    @request: command [string]
    @response: success [bool]

    Service 'add_local_map'
    @request: command [string]
    @response: success [bool]   
    """

    def __init__(self):
        """
        Method for initialization of an instance of the CostmapGenerator class. It, for example,
        reads in parameters from a parameter server, initializes publishers and estimates the 
        decay of soft padding based on the decay type.
        """
        # Init mutex
        self.lock = Lock()

        # Init tf listener
        self.listener = tf.TransformListener()

        # Get parameters from parameter server
        self.map_nr = rospy.get_param('~init_map_nr')
        self.debug_mode = rospy.get_param('~debug_mode')

        self.hard_padding = rospy.get_param('~global_costmap')['robot_diameter']/2 + \
             rospy.get_param('~global_costmap')['safety_distance']      # Unit: m
        self.padded_val = rospy.get_param('~global_costmap')['padded_val']
        self.decay_type = rospy.get_param('~global_costmap')['decay_type']
        self.soft_padding = rospy.get_param('~global_costmap')['decay_distance']    # Unit: m
        self.apply_soft_padding = rospy.get_param('~global_costmap')['apply_soft_padding']

        self.lc_length = rospy.get_param('~local_costmap')['length']
        self.lc_freq = rospy.get_param('~local_costmap')['frequency']
        self.lc_freq_scan = rospy.get_param('~local_costmap')['frequency_scan']

        # Init publisher
        self.pub_global_costmap = rospy.Publisher('/global_costmap', OccupancyGrid, queue_size=10 ,latch=True)
        self.pub_local_costmap = rospy.Publisher('/local_costmap', OccupancyGrid, queue_size=10 ,latch=False)
        self.pub_local_obstacles = rospy.Publisher('/local_obstacles', PointCloud, queue_size=10 ,latch=False)

        # Get static map from map server via request to service 'get_map'
        self._call_get_map_srv()

        # Transfer 'soft' and 'hard' padding from m in cell units
        self.hard_padding = np.ceil(self.hard_padding / self.static_map.info.resolution)
        decay_steps = np.ceil(self.soft_padding / self.static_map.info.resolution)

        # Set val of soft_padding based on decay type
        if self.decay_type == 'exponential':
            self.soft_padding = [int(100*np.exp(-x)-2) for x in np.linspace(0, 3.506, decay_steps)]
        elif self.decay_type == 'reciprocal':
            self.soft_padding = [int(1/(x + 0.0102)) for x in np.linspace(0, 0.9898, decay_steps)]
        elif self.decay_type == 'linear':
            self.soft_padding = [int((100 - x)) for x in np.linspace(2, 99, decay_steps)]
        else:
            rospy.logerr("Costmap generator: Decay type '{}' is not defined.".format(self.decay_type))

        # Start the services
        self._start_switch_maps_service()
        self._start_clear_map_service()
        self._start_add_local_map_service()

        # Pad the static map based on parameters
        self._pad_static_map()

        # Publish padded map on topic /global_costmap (latched)
        self.static_map.header.stamp = rospy.Time.now()
        self.pub_global_costmap.publish(self.static_map)

        # Estimate length of local_costmap in grid cells
        lc_grid_length = int(np.round((self.lc_length / self.static_map.info.resolution), 0))
        # Number has to be uneven so that robot will be located in exactelly the middle
        if lc_grid_length % 2 == 0:
            lc_grid_length += 1

        # Init instance variables
        self.current_pose = (0, 0, 0)

        # Init subscribers
        rospy.Subscriber('/scan', LaserScan, self._cb_scan)
        rospy.Subscriber('/odom', Odometry, self._cb_current_pose)

        # Prepare local_costmap for publishing
        self.local_costmap = OccupancyGrid()
        self.local_costmap.header.frame_id = 'map'
        self.local_costmap.info.resolution = self.static_map.info.resolution
        self.local_costmap.info.height = lc_grid_length
        self.local_costmap.info.width = lc_grid_length
        self.local_costmap.info.origin.position.x = self.current_pose[0] - self.lc_length / 2 # Robot is in the middle of the map
        self.local_costmap.info.origin.position.y = self.current_pose[1] - self.lc_length / 2
        self.local_costmap.info.origin.position.z = 0
        self.local_costmap.info.origin.orientation.x = 0
        self.local_costmap.info.origin.orientation.y = 0
        self.local_costmap.info.origin.orientation.z = 0
        self.local_costmap.info.origin.orientation.w = 1

    def _cb_current_pose(self, msg):
        """
        A callback function for retrieving the pose of the robot.

        @param msg: Message of the type Odometry.
        """
        # Transform robot pose to from /odom to /map frame 
        self.listener.waitForTransform('/map', '/odom', rospy.Time(0), rospy.Duration(10))
        msg_new = PoseStamped()
        msg_new.pose.position = msg.pose.pose.position
        msg_new.pose.orientation = msg.pose.pose.orientation
        msg_new.header.frame_id= '/odom'
        msg_new.header.stamp = self.listener.getLatestCommonTime('/map', '/odom')
        msg = self.listener.transformPose('/map', msg_new)
        quaternion = (msg.pose.orientation.x, msg.pose.orientation.y, \
            msg.pose.orientation.z, msg.pose.orientation.w,)
        euler = tf.transformations.euler_from_quaternion(quaternion)

        self.lock.acquire()
        self.current_pose = (msg.pose.position.x, msg.pose.position.y, euler[2])
        self.lock.release()

        rospy.sleep(1/(self.lc_freq_scan - 1)) # To ensure that pose and scan msgs are alligned.

    def _cb_scan(self, msg):
        """
        A callback function for retrieving the output of the laser scanner.

        @param msg: Message of the type LaserScan.
        """
        self.lock.acquire()
        self.scan = msg
        self.lock.release()

    def _call_get_map_srv(self):
        """
        Private method for calling the 'get_map' service from the map server to obtain a static map, 
        which represents the basis of a costmap.

        @return: A boolean indicating the success of the service call.
        """
        rospy.wait_for_service('get_map')
        get_map = rospy.ServiceProxy('get_map', GetMap)
        try:
            self.static_map = get_map(self.map_nr).map
            return True
        except rospy.ServiceException:
            rospy.logerr("Costmap generator: Could not receive map from map server.")
            return False

    @threaded
    def _start_switch_maps_service(self):
        """
        Private method that runs in a seperate thread and provides the ROS service 'switch_maps'.
        """
        rospy.Service('switch_maps', SwitchMaps, self._handle_switch_maps)
        rospy.spin()

    @threaded
    def _start_clear_map_service(self):
        """
        Private method that runs in a seperate thread and provides the ROS service 'clear_map'.
        """
        rospy.Service('clear_map', ClearMap, self._handle_clear_map)
        rospy.spin()

    @threaded
    def _start_add_local_map_service(self):
        """
        Private method that runs in a seperate thread and provides the ROS service 'add_local_map'.
        """
        rospy.Service('add_local_map', AddLocalMap, self._handle_add_local_map)
        rospy.spin()

    def _handle_add_local_map(self, req):
        """
        Handler method for the service 'add_local_map', which adds the information of the local costmap
        to the global costmap and pads the new appearing obstacles.

        @param req: A string referring to the command to be executed.
        @return: A boolean indicating the success of the operation.
        """
        if req.command == 'stuck':
            rospy.loginfo('Costmap generator: Adapted global costmap based on local costmap.')
            global_costmap = np.array(self.static_map.data, dtype=np.int8).reshape(self.static_map.info.height, -1)
            
            # Add local obstacles to the global costmap and pad them.
            for point in self.local_obstacles.points:
                x = int(np.floor((point.x - self.static_map.info.origin.position.x)/self.static_map.info.resolution))
                y = int(np.floor((point.y - self.static_map.info.origin.position.y)/self.static_map.info.resolution))
                try:
                    self._pad_point(global_costmap, (y, x))
                    global_costmap[y, x] = 100
                except IndexError:
                    pass

            self.static_map.data = global_costmap.ravel()
            self.static_map.header.stamp = rospy.Time.now()
            self.pub_global_costmap.publish(self.static_map)
            return True
        else:
            rospy.logerr("Costmap generator: Unknown command for 'add_local_map' service.")
            return False
    
    def _handle_switch_maps(self, req):
        """
        Handler method for the service 'switch_maps', which changes the map used for costmap
        generation.

        @param req: An integer referring to the map to switch to.
        @return: A boolean indicating the success of the operation.
        """
        self.map_nr = req.map_nr_switch

        # Try to get map from map server
        success = self._call_get_map_srv()

        if success == True:
            rospy.loginfo('Costmap generator: Changed map in map server to map{}.'.format(self.map_nr))
            self._pad_static_map()
            self.static_map.header.stamp = rospy.Time.now()
            self.pub_global_costmap.publish(self.static_map)
            return True
        else:
            rospy.logerr("Costmap generator: Unknown command for 'switch_maps' service.")
            return False

    def _handle_clear_map(self, req):
        """
        Handler method for the service 'clear_map', which clears the global costmap and resets
        it to the original state.

        @param req: A string referring to the command to be executed.
        @return: A boolean indicating the success of the operation.
        """
        if req.command == 'clear':
            rospy.loginfo('Costmap generator: Global costmap has been cleared.')

            # Get the plain map from the map server and pad it
            self._call_get_map_srv()
            self._pad_static_map()

            self.static_map.header.stamp = rospy.Time.now()
            self.pub_global_costmap.publish(self.static_map)
            return True
        else:
            rospy.logerr("Costmap generator: Unknown command for 'clear_map' service.")
            return False

    def _pad_point(self, costmap, point):
        """
        Private method that padds one point on a costmap.

        @param costmap: The np.array in which the point should be padded.
        @param point: A tuple consisting of the x and y coordinates of the point to be padded.
        """
        x, y = point

        # Use 'open grid' function to create a 'circular' mask for efficient padding
        grid = np.ogrid[-x:self.static_map.info.height-x, -y:self.static_map.info.width-y]

        # Apply 'hard padding'
        mask_hard_padding = (grid[1]*grid[1] + grid[0]*grid[0] <= self.hard_padding * self.hard_padding) & (costmap < self.padded_val)
        costmap[mask_hard_padding] = self.padded_val

        if self.apply_soft_padding == True:
            # Apply 'soft padding' for each step in the soft_padding list (decay steps)
            for idx, val in enumerate(self.soft_padding, start=1):
                masks_soft_padding = (costmap < val) & (costmap > -1) \
                    & ((grid[1]*grid[1] + grid[0]*grid[0] <= (self.hard_padding + idx) * (self.hard_padding + idx)))
                costmap[masks_soft_padding] = val

    @timed
    def _pad_static_map(self):
        """
        Private method that applies hard and soft padding to the static map.
        """
        global_costmap = np.array(self.static_map.data, dtype=np.int8).reshape(self.static_map.info.height, -1)

        # Get index of occupied cells
        occupied_index = np.where(global_costmap == 100)

        # Loop over occupied cells and pad them
        for coord in zip(occupied_index[0], occupied_index[1]):
            self._pad_point(global_costmap, coord)
    
        # Show messages for debugging
        if self.debug_mode == True:
            # Receive an image of the global_costmap
            cv2.imwrite('map_padded.jpg', global_costmap.astype(np.uint8))
            print(np.unique(global_costmap))

        self.static_map.data = global_costmap.ravel()

    def generate_local_costmap_and_obstacles(self):
        """
        Main method of the CostmapGenerator class. It creates and publishes the local costmap and a point cloud 
        of the x and y coordinates of the sensed obstacles in the map frame.
        """
        rospy.wait_for_message('/scan', LaserScan)

        # Initilize point cloud for transformations of obstacles
        pointcloud_hokuyo = PointCloud()
        pointcloud_hokuyo.header.frame_id = 'hokuyo_link'

        # Initilize point cloud for transformations regarding the visualization of the local map.
        pointcloud_local_costmap = PointCloud()
        pointcloud_local_costmap.header.frame_id = 'hokuyo_link'

        # Set robot position to the middle of the grid map
        local_costmap_middle = int(self.local_costmap.info.height/2)
        robot_pos = (local_costmap_middle, local_costmap_middle)

        while not rospy.is_shutdown():
            start = time.time()

            # Get current values from subscribed topics
            ranges = self.scan.ranges 
            current_pose = self.current_pose
            min_angle = self.scan.angle_min
            angle_inc = self.scan.angle_increment

            # Clear point clouds
            pointcloud_hokuyo.points.clear()
            pointcloud_local_costmap.points.clear()

            # Clear local costmap
            local_costmap = np.zeros((self.local_costmap.info.height, self.local_costmap.info.height), dtype=np.int8)

            for idx, element in enumerate(ranges):
                # Check if element would be in local_costmap
                if element < self.lc_length/2:
                    angle = min_angle + idx * angle_inc

                    # Get position of the sensed element in the frame of the laser scanner
                    dx = np.cos(angle) * element
                    dy = np.cos(np.pi/2 - angle) * element

                    # Get position of the sensed element for visualization of the local costmap
                    dx_local_map = np.cos(np.pi/2 - (angle + current_pose[2])) * element
                    dy_local_map = np.sin(np.pi/2 - (angle + current_pose[2])) * element     

                    point_hokuyo_frame = Point()
                    point_hokuyo_frame.x = dx
                    point_hokuyo_frame.y = dy
                    point_hokuyo_frame.z = 0

                    point_local_costmap = Point()
                    point_local_costmap.x = dx_local_map
                    point_local_costmap.y = dy_local_map
                    point_local_costmap.z = 0

                    pointcloud_hokuyo.points.append(point_hokuyo_frame)
                    pointcloud_local_costmap.points.append(point_local_costmap)

            # Transform point cloud into 'map' frame
            self.listener.waitForTransform('/hokuyo_link', '/base_link', rospy.Time(0), rospy.Duration(10))
            pointcloud_hokuyo.header.stamp = self.listener.getLatestCommonTime('/hokuyo_link', '/base_link')
            pointcloud_local_costmap.header.stamp = self.listener.getLatestCommonTime('/hokuyo_link', '/base_link')
            pointcloud_local_costmap = self.listener.transformPointCloud('/base_link', pointcloud_local_costmap)
            pointcloud_base_link = self.listener.transformPointCloud('/base_link', pointcloud_hokuyo)

            self.listener.waitForTransform('/odom', '/base_link', rospy.Time(0), rospy.Duration(10))
            pointcloud_base_link.header.stamp = self.listener.getLatestCommonTime('/base_link', '/odom')
            pointcloud_odom = self.listener.transformPointCloud('/odom', pointcloud_base_link)

            self.listener.waitForTransform('/map', '/odom', rospy.Time(0), rospy.Duration(10))
            pointcloud_odom.header.stamp = self.listener.getLatestCommonTime('/odom', '/map')
            pointcloud_map = self.listener.transformPointCloud('/map', pointcloud_odom)

            # Add points of the local costmap that have been transformed for visualization purposes
            for point in pointcloud_local_costmap.points:
                point = (int(np.floor(point.x / self.local_costmap.info.resolution)), \
                     int(np.floor(point.y / self.local_costmap.info.resolution)))
                try:
                    local_costmap[robot_pos[0] + point[0], robot_pos[1] + point[1]] = 100
                except:
                    pass

            # Publish local_costmap with robot in its center
            self.local_costmap.header.stamp = rospy.Time.now()
            self.local_costmap.info.origin.position.x = current_pose[0] - self.lc_length / 2
            self.local_costmap.info.origin.position.y = current_pose[1] - self.lc_length / 2
            self.local_costmap.data = local_costmap.ravel()
            self.pub_local_costmap.publish(self.local_costmap)

            # Publish local_obstacles
            self.local_obstacles = pointcloud_map
            self.pub_local_obstacles.publish(self.local_obstacles)

            end = time.time()
            # To ensure that desired frequency does not get affected by computation time.
            rospy.sleep((1/self.lc_freq) - end + start)


if __name__ == "__main__":
    # Initialize a ROS node named costmap_generator
    rospy.init_node('costmap_generator')

    log_times = rospy.get_param('~log_times')

    costmap_gen = CostmapGenerator()
    costmap_gen.generate_local_costmap_and_obstacles()